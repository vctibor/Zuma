use std::str::FromStr;
use crate::parsing::ast::*;
use crate::parsing::parsing_functions::*;

grammar;

pub Doc: Document = {
    Expression* => Document { rows: <> }
};

pub Expression: Expression = {
    FunctionCall => Expression::FunctionCall(<>),
    ConstantDeclaration => Expression::ConstantDeclaration(<>),
};

pub ConstantDeclaration: ConstantDeclaration = {
    "let" <name:Name> "=" <value:Literal> ";" => ConstantDeclaration { name, value },
}

pub FunctionCall: FunctionCall = {
    <name:Name> <args: Arg*> ";" => FunctionCall { name: name, args }
};

pub Arg: Arg = {
    <name:Name> "=" <value:Literal> => Arg { name, value },
};

pub Name: String = r"[a-z-]+" => <>.to_string();

pub Literal: Value = {
    Number => Value::Number(<>),
    Point => Value::Point(<>),
    Color => Value::Color(<>),
    Text => Value::String(strip_quotes(<>)),
}

pub Text: String = r#"".*""# => <>.to_string();

pub Point: Point = {
    "[" <a:Number> "," <b:Number> "]" => Point { x: b, y: a }
};

pub Color: Color = {
    "black"  => Color { red: 0, green: 0, blue: 0 },
    "white"  => Color { red: 255, green: 255, blue: 255 },
    "red"    => Color { red: 255, green: 0, blue: 0 },
    "green"  => Color { red: 0, green: 255, blue: 0 },
    "blue"   => Color { red: 0, green: 0, blue: 255 },
    "yellow" => Color { red: 255, green: 255, blue: 0 },
    r"#[a-f0-9]{6}" => parse_color(<>.to_string()).unwrap()
}

pub Number: f32 = r"[0-9]+\.?[0-9]*" => f32::from_str(<>).unwrap();