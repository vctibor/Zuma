use std::str::FromStr;
use crate::parsing::ast::*;
use crate::parsing::parsing_functions::*;

grammar;

pub Doc: Document = {
    Expression* => Document { expressions: <> }
};

pub Expression: Expression = {
    FunctionCall => Expression::FunctionCall(<>),
    ConstantDeclaration => Expression::ConstantDeclaration(<>),
    Scope => Expression::Scope(<>),
};

pub Scope: Scope = {
    "{" <expressions:Expression*> "}" => Scope { expressions },
};

pub ConstantDeclaration: ConstantDeclaration = {
    "let" <name:Name> "=" <value:OperationInput> ";" => ConstantDeclaration { name, value },
    "let" <name:Name> "=" <value:Operation> ";" => ConstantDeclaration { name, value: OperationInput::Operation(value) },
}

pub FunctionCall: FunctionCall = {
    <name:Name> <args: Arg*> ";" => FunctionCall { name: name, args }
};

pub Arg: Arg = {
    <name:Name> "=" <value:OperationInput> => Arg { name, value },
    <name:Name> "=" <value:Operation> => Arg { name, value: OperationInput::Operation(value) },
};

pub Operation: Operation = {
    <lh:OperationInput> <op:Operator> <rh:OperationInput> => Operation { lh: Box::new(lh), op, rh: Box::new(rh) },
};

pub OperationInput: OperationInput = {
    Literal => OperationInput::Literal(<>),
    Name => OperationInput::Constant(<>),
    "(" <o:Operation> ")" => OperationInput::Operation(o),
}

pub Operator: Operator = {
    "+" => Operator::Addition,
    "-" => Operator::Subtraction,
    "*" => Operator::Multiplication,
    "/" => Operator::Division,
    "<" => Operator::LessThan,
    ">" => Operator::GreaterThan,
    "==" => Operator::Equality,
    "&" => Operator::LogicalAnd,
    "|" => Operator::LogicalOr,
    "!" => Operator::Negation,
};

pub Name: String = r"[a-z_-]+" => <>.to_string();

pub Literal: Value = {
    Number => Value::Number(<>),
    Point => Value::Point(<>),
    Color => Value::Color(<>),
    Text => Value::String(<>),
    Bool => Value::Bool(<>),
}

pub Text: String = r#"".*""# => strip_quotes(<>);

pub Point: Point = {
    "[" <a:Number> "," <b:Number> "]" => Point { x: b, y: a }
};

pub Color: Color = {
    "black"  => Color { red: 0, green: 0, blue: 0 },
    "white"  => Color { red: 255, green: 255, blue: 255 },
    "red"    => Color { red: 255, green: 0, blue: 0 },
    "green"  => Color { red: 0, green: 255, blue: 0 },
    "blue"   => Color { red: 0, green: 0, blue: 255 },
    "yellow" => Color { red: 255, green: 255, blue: 0 },
    r"#[a-f0-9]{6}" => parse_color(<>.to_string()).unwrap()
}

pub Number: f32 = r"[0-9]+\.?[0-9]*" => f32::from_str(<>).unwrap();

pub Bool: bool = {
    "true" => true,
    "false" => false,
}