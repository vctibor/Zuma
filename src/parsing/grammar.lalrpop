use std::str::FromStr;
use crate::parsing::zuma_model::*;
use crate::parsing::parsing_functions::*;

grammar;

pub Prim: GeometricPrimitive = {
    "line" "start" "=" <start:Point> "end" "=" <end:Point> "color" "=" <color:Color> ";" => GeometricPrimitive::Line(Line { start, end, color: Some(color) })
};

pub Point: Point = {
    "[" <x:Number> "," <y:Number> "]" => Point { x, y }
};

//pub Color: Color = r"black|white|red|green|blue|yellow|#[a-f0-9]{6}" => parse_color(<>.to_string()).unwrap();

pub Color: Color = {
    "black"  => Color { red: 0, green: 0, blue: 0 },
    "white"  => Color { red: 255, green: 255, blue: 255 },
    "red"    => Color { red: 255, green: 0, blue: 0 },
    "green"  => Color { red: 0, green: 255, blue: 0 },
    "blue"   => Color { red: 0, green: 0, blue: 255 },
    "yellow" => Color { red: 255, green: 255, blue: 0 },
    r"#[a-f0-9]{6}" => parse_color(<>.to_string()).unwrap()
}

pub Number: f32 = r"[0-9]+\.?[0-9]*" => f32::from_str(<>).unwrap();

pub Bool: bool = r"true|false" => bool::from_str(<>).unwrap();