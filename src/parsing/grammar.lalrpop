use std::str::FromStr;
use crate::parsing::ast::*;
use crate::parsing::parsing_functions::*;

grammar;

pub Doc: Document = {
    Expression* => Document { expressions: <> }
}

pub Expression: Expression = {
    FunctionCall => Expression::FunctionCall(<>),
    ConstantDeclaration => Expression::ConstantDeclaration(<>),
    <scope:Scope> ";" => Expression::Scope(scope),
    IfStatement => Expression::IfStatement(<>),
    ForLoop => Expression::ForLoop(<>),
}

pub ForLoop: ForLoop = {
    "for" <index_name:Name> "=" <starting_value:Number> "," <step:Number> "," <final_value:Number> <scope:Scope>
        => ForLoop { index_name, starting_value, step, final_value, scope },
}

pub IfStatement: IfStatement = {
    "if" <condition:OperationInput> <positive:Scope> "else" <negative:Scope> ";"
        => IfStatement { condition, positive: Box::new(positive), negative: Box::new(negative) },
}

pub Scope: Scope = {
    "{" <expressions:Expression*> "}" => Scope { expressions },
}

pub ConstantDeclaration: ConstantDeclaration = {
    "let" <name:Name> "=" <value:OperationInput> ";"
        => ConstantDeclaration { name, value },

    "let" <name:Name> "=" <value:Operation> ";"
        => ConstantDeclaration { name, value: OperationInput::Operation(value) },
}

pub FunctionCall: FunctionCall = {
    <name:Name> <args: Arg*> ";" => FunctionCall { name, args }
}

pub Arg: Arg = {
    <name:Name> "=" <value:OperationInput> => Arg { name, value },
    <name:Name> "=" <value:Operation> => Arg { name, value: OperationInput::Operation(value) },
}

pub Operation: Operation = {
    <lh:OperationInput> <op:Operator> <rh:OperationInput>
        => Operation { lh: Box::new(lh), op, rh: Box::new(rh) },
}

pub OperationInput: OperationInput = {
    Literal => OperationInput::Literal(<>),
    Name => OperationInput::Constant(<>),
    "(" <o:Operation> ")" => OperationInput::Operation(o),
}

pub Operator: Operator = {
    "+" => Operator::Addition,
    "-" => Operator::Subtraction,
    "*" => Operator::Multiplication,
    "/" => Operator::Division,
    "<" => Operator::LessThan,
    ">" => Operator::GreaterThan,
    "==" => Operator::Equality,
    "&" => Operator::LogicalAnd,
    "|" => Operator::LogicalOr,
}

pub Name: String = r"[a-z_-]+" => <>.to_string();

pub Literal: Value = {
    Number => Value::Number(<>),
    Point => Value::Point(<>),
    Color => Value::Color(<>),
    Text => Value::String(<>),
    Bool => Value::Bool(<>),
}

pub Text: String = r#"".*""# => strip_quotes(<>);

pub Point: Point = {
    "[" <a:OperationInput> "," <b:OperationInput> "]"
        => Point { x: Box::new(b), y: Box::new(a) },
}

pub Color: Color = {
    "black"  => color(0, 0, 0),
    "white"  => color(255, 255, 255),
    "red"    => color(255, 0, 0),
    "green"  => color(0, 255, 0),
    "blue"   => color(0, 0, 255),
    "yellow" => color(255, 255, 0),
    r"#[a-f0-9]{6}" => parse_color(<>.to_string()).unwrap(),

    "(" <red:OperationInput> "," <green:OperationInput> "," <blue:OperationInput> ")"
        => Color {
            red: Box::new(red),
            green: Box::new(green),
            blue: Box::new(blue),
        },
}

pub Number: f32 = r"[0-9]+\.?[0-9]*" => f32::from_str(<>).unwrap();

pub Bool: bool = {
    "true" => true,
    "false" => false,
}