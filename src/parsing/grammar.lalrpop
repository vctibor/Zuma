use std::str::FromStr;
use crate::parsing::zuma_model::*;
use crate::parsing::parsing_functions::*;

grammar;

pub Doc: Document = {
    FunctionCall* => Document { rows: <> }
};

FunctionCall: FunctionCall = {
    <name: r"[a-z]+"> <args: Arg*> ";" => FunctionCall { name: name.to_string(), args }
};

Arg: Arg = {
    <name: r"[a-z]+"> "=" <value:Number> => number_arg(name.to_string(), value),
    <name: r"[a-z]+"> "=" <value:Color> => color_arg(name.to_string(), value),
    <name: r"[a-z]+"> "=" <value:Point> => point_arg(name.to_string(), value)
};

Point: Point = {
    "[" <x:Number> "," <y:Number> "]" => Point { x, y }
};

Color: Color = {
    "black"  => Color { red: 0, green: 0, blue: 0 },
    "white"  => Color { red: 255, green: 255, blue: 255 },
    "red"    => Color { red: 255, green: 0, blue: 0 },
    "green"  => Color { red: 0, green: 255, blue: 0 },
    "blue"   => Color { red: 0, green: 0, blue: 255 },
    "yellow" => Color { red: 255, green: 255, blue: 0 },
    r"#[a-f0-9]{6}" => parse_color(<>.to_string()).unwrap()
}

Number: f32 = r"[0-9]+\.?[0-9]*" => f32::from_str(<>).unwrap();