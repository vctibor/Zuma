use std::str::FromStr;
use crate::parsing::ast::*;
use crate::parsing::parsing_functions::*;

grammar;

pub Doc: Document = {
    Expression* => Document { expressions: <> }
}

pub Expression: Expression = {
    FunctionCall => Expression::FunctionCall(<>),
    ConstantDeclaration => Expression::ConstantDeclaration(<>),
    <scope:Scope> ";" => Expression::Scope(scope),
    IfStatement => Expression::IfStatement(<>),
    ForLoop => Expression::ForLoop(<>),
    UserProcedure => Expression::UserProcedure(<>),
}

pub UserProcedure: UserProcedure = {
    "proc" <name:Name> <args:ProcArg*> <body:Scope> ";" => UserProcedure { name, args, body },
}

pub ProcArg: ProcArg = {
    <name:Name> ":" <arg_type:Type> => ProcArg::Required(RequiredArg { name, arg_type }),
    <name:Name> "=" <default_value:OperationInput> => ProcArg::Optional(OptionalArg { name, default_value }),
}

pub ForLoop: ForLoop = {
    "for" <index_name:Name> "=" <starting_value:OperationInput> "," <step:OperationInput> "," <final_value:OperationInput> <scope:Scope> ";"
        => ForLoop { index_name, starting_value, step, final_value, scope },
}

pub IfStatement: IfStatement = {
    "if" <condition:OperationInput> <positive:Scope> "else" <negative:Scope> ";"
        => IfStatement { condition, positive: Box::new(positive), negative: Box::new(negative) },
}

pub Scope: Scope = {
    "{" <expressions:Expression*> "}" => Scope { expressions },
}

pub ConstantDeclaration: ConstantDeclaration = {
    "let" <name:Name> "=" <value:OperationInput> ";"
        => ConstantDeclaration { name, value },

    "let" <name:Name> "=" <value:Operation> ";"
        => ConstantDeclaration { name, value: OperationInput::Operation(value) },
}

pub FunctionCall: FunctionCall = {
    <name:Name> <args: Arg*> ";" => FunctionCall { name, args }
}

pub Arg: Arg = {
    <name:Name> "=" <value:OperationInput> => Arg { name, value },
    <name:Name> "=" <value:Operation> => Arg { name, value: OperationInput::Operation(value) },
}

pub Operation: Operation = {
    <lh:OperationInput> <op:Operator> <rh:OperationInput>
        => Operation { lh: Box::new(lh), op, rh: Box::new(rh) },
}

pub OperationInput: OperationInput = {
    Literal => OperationInput::Literal(<>),
    Name => OperationInput::Constant(<>),
    "(" <o:Operation> ")" => OperationInput::Operation(o),
}

pub Operator: Operator = {
    "+" => Operator::Addition,
    "-" => Operator::Subtraction,
    "*" => Operator::Multiplication,
    "/" => Operator::Division,
    "<" => Operator::LessThan,
    ">" => Operator::GreaterThan,
    "==" => Operator::Equality,
    "&" => Operator::LogicalAnd,
    "|" => Operator::LogicalOr,
}

pub Name: String = r"[a-z_-]+" => <>.to_string();

pub Literal: Value = {
    Number => <>,
    Point => <>,
    Color => <>,
    Text => <>,
    Bool => <>,
}

pub Array: Array = {
    "[" <values:Number+> "]" => Array { array_type: ZumaType::Number, values },
    "[" <values:Point+> "]" => Array { array_type: ZumaType::Point, values },
    "[" <values:Color+> "]" => Array { array_type: ZumaType::Color, values },
    "[" <values:Text+> "]" => Array { array_type: ZumaType::Text, values },
    "[" <values:Bool+> "]" => Array { array_type: ZumaType::Bool, values },
}


pub Text: Value = r#""[^"]*""# => Value::String(strip_quotes(<>));

pub Point: Value = {
    "[" <a:OperationInput> "," <b:OperationInput> "]"
        => Value::Point(Point { x: Box::new(b), y: Box::new(a) }),
}

pub Color: Value = {
    "black"  => Value::Color(color(0, 0, 0)),
    "white"  => Value::Color(color(255, 255, 255)),
    "red"    => Value::Color(color(255, 0, 0)),
    "green"  => Value::Color(color(0, 255, 0)),
    "blue"   => Value::Color(color(0, 0, 255)),
    "yellow" => Value::Color(color(255, 255, 0)),
    r"#[a-f0-9]{6}" =>Value::Color( parse_color(<>.to_string()).unwrap()),

    "(" <red:OperationInput> "," <green:OperationInput> "," <blue:OperationInput> ")"
        => Value::Color(Color {
            red: Box::new(red),
            green: Box::new(green),
            blue: Box::new(blue),
        }),
}

pub Number: Value = r"-?[0-9]+\.?[0-9]*" => Value::Number(f32::from_str(<>).unwrap());

pub Bool: Value = {
    "true" => Value::Bool(true),
    "false" => Value::Bool(false),
}


pub Type: ZumaType = {
    "Bool" => ZumaType::Bool,
    "Number" => ZumaType::Number,
    "Point" => ZumaType::Point,
    "Color" => ZumaType::Color,
    "Text" => ZumaType::Text,
}
